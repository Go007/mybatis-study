<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hong.mybatis.dao.OrderMapperPlus">

    <!--自定义某个javaBean的封装规则
        type：自定义规则的Java类型
        id:唯一id方便引用
     -->
    <resultMap type="com.hong.mybatis.bean.Order" id="MySimpleOrder">
        <!--指定主键列的封装规则
        id定义主键会底层有优化；
        column：指定哪一列
        property：指定对应的javaBean属性
          -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="order_num" property="orderNum"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="order_status" property="orderStatus"/>
        <result column="user_id" property="userId"/>
        <result column="order_content" property="orderContent"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <!-- resultMap:自定义结果集映射规则；  -->
    <select id="getOne"  resultMap="MySimpleOrder">
		select * from t_order where id=#{id}
	</select>

    <!--
	场景一：一对一
		查询 t_order 的同时查询订单所属的用户
		Order === User
	 -->

    <!--
		联合查询：级联属性封装结果集
	  -->
    <resultMap type="com.hong.mybatis.bean.Order" id="MyDifOrder">
        <id column="id" property="id"/>
        <result column="order_num" property="orderNum"/>
        <result column="order_status" property="orderStatus"/>
        <result column="user_id" property="userId"/>
        <result column="order_content" property="orderContent"/>

        <result column="uid" property="user.id"/>
        <result column="name" property="user.name"/>
    </resultMap>

    <select id="getOneWithUserName" resultMap="MyDifOrder">
          select o.id id,o.order_num order_num,o.order_status,o.user_id,o.order_content,u.name name,u.id uid
          from t_order o,t_user u
          where o.user_id=u.id and o.id=#{id}
    </select>

    <!--
       使用association定义关联的单个对象的封装规则；
    -->
    <resultMap type="com.hong.mybatis.bean.Order" id="MyDifOrder2">
        <id column="id" property="id"/>
        <result column="order_num" property="orderNum"/>
        <result column="order_status" property="orderStatus"/>
        <result column="user_id" property="userId"/>
        <result column="order_content" property="orderContent"/>

        <!--  association可以指定联合的javaBean对象
        property="user"：指定哪个属性是联合的对象
        javaType:指定这个属性对象的类型[不能省略]
        -->
        <association property="user" javaType="com.hong.mybatis.bean.User">
            <id column="uid" property="id"/>
            <result column="name" property="name"/>
        </association>
    </resultMap>

    <select id="getOneWithUserName2" resultMap="MyDifOrder2">
          select o.id,o.order_num,o.order_status,o.user_id,o.order_content,u.name,u.id uid
          from t_order o,t_user u
          where o.user_id=u.id and o.id=#{id}
    </select>

    <!-- 使用association进行分步查询：
		1、先按照订单id查询订单信息
		2、根据查询订单信息中的user_id值去用户表查出用户信息
		3、用户设置到订单中；
	 -->
    <resultMap type="com.hong.mybatis.bean.Order" id="MyOrderByStep">
        <id column="id" property="id"/>
        <result column="order_num" property="orderNum"/>
        <result column="order_status" property="orderStatus"/>
        <result column="user_id" property="userId"/>
        <result column="order_content" property="orderContent"/>

        <!-- association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法

	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	 -->
        <association property="user" select="com.hong.mybatis.dao.UserMapper.getOneById" column="user_id"/>
    </resultMap>

    <select id="getOneByStep" resultMap="MyOrderByStep">
          select o.id,o.order_num,o.order_status,o.user_id,o.order_content
          from t_order o
          where o.id=#{id}
        <if test="_parameter!=null">
            and 1=1
        </if>
    </select>

    <!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Order==>User：
	 		我们每次查询 Order 对象的时候，都将一起查询出来。
	 		User 信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：
	  -->
    <!-- ==================association============================ -->

    <!--
    场景二：
        查询 User 的时候将 User 对应的所有 Order 信息也查询出来：注释在UserMapper.xml中
     -->
    <select id="getOrderListByUserId" resultType="com.hong.mybatis.bean.Order">
		select * from t_order where user_id=#{userId}
	</select>


    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Order：
            如果查出的order_status = 1：就把User信息查询出来;
            如果查出的order_status = 0：就把 order_num 这一列的值赋值给order_content;
     -->
    <resultMap type="com.hong.mybatis.bean.Order" id="MyOrderDis">
        <id column="id" property="id"/>
        <result column="order_num" property="orderNum"/>
        <result column="order_status" property="orderStatus"/>
        <result column="user_id" property="userId"/>
        <result column="order_content" property="orderContent"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="order_status">
            <case value="1" resultType="com.hong.mybatis.bean.Order">
                <association property="user"
                             select="com.hong.mybatis.dao.UserMapper.getOneById"
                             column="user_id">
                </association>
            </case>
            <case value="0" resultType="com.hong.mybatis.bean.Order">
                <result column="order_num" property="orderContent"/>
            </case>
        </discriminator>
    </resultMap>

    <select id="getListByDiscriminator"  resultMap="MyOrderDis">
		select * from t_order
	</select>
</mapper>
